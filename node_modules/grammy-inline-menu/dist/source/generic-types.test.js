"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const generic_types_1 = require("./generic-types");
function filterNonNullableTypesafeEqual(t, actual, expected) {
    t.deepEqual(actual, expected);
}
(0, ava_1.default)('filterNonNullable', t => {
    const input = ['bla', undefined, 'blubb', null];
    const output = input.filter((0, generic_types_1.filterNonNullable)());
    filterNonNullableTypesafeEqual(t, output, ['bla', 'blubb']);
});
(0, ava_1.default)('isRegExpExecArray true', t => {
    t.true((0, generic_types_1.isRegExpExecArray)(/bla/.exec('bla')));
    t.true((0, generic_types_1.isRegExpExecArray)(/b(la)/.exec('bla')));
});
(0, ava_1.default)('isRegExpExecArray null', t => {
    t.false((0, generic_types_1.isRegExpExecArray)(null));
    t.false((0, generic_types_1.isRegExpExecArray)(/bla/.exec('blubb')));
});
(0, ava_1.default)('isRegExpExecArray array without string entry', t => {
    t.false((0, generic_types_1.isRegExpExecArray)([]));
    t.false((0, generic_types_1.isRegExpExecArray)([42]));
});
(0, ava_1.default)('isRegExpExecArray normal string array', t => {
    t.false((0, generic_types_1.isRegExpExecArray)(['bla']));
    t.false((0, generic_types_1.isRegExpExecArray)(['bla', 'la']));
});
(0, ava_1.default)('isObject examples', t => {
    t.true((0, generic_types_1.isObject)({}));
    t.true((0, generic_types_1.isObject)(t));
    t.false((0, generic_types_1.isObject)('bla'));
    t.false((0, generic_types_1.isObject)(() => 'bla'));
    t.false((0, generic_types_1.isObject)(5));
    t.false((0, generic_types_1.isObject)(null));
    t.false((0, generic_types_1.isObject)(true));
    t.false((0, generic_types_1.isObject)(undefined));
});
(0, ava_1.default)('hasTruthyKey examples', t => {
    t.false((0, generic_types_1.hasTruthyKey)(undefined, 'stuff'));
    t.false((0, generic_types_1.hasTruthyKey)('undefined', 'stuff'));
    t.false((0, generic_types_1.hasTruthyKey)([], 'stuff'));
    t.false((0, generic_types_1.hasTruthyKey)({}, 'stuff'));
    t.false((0, generic_types_1.hasTruthyKey)({ stuffy: 'bla' }, 'stuff'));
    t.true((0, generic_types_1.hasTruthyKey)({ stuff: 'bla' }, 'stuff'));
    t.true((0, generic_types_1.hasTruthyKey)({ stuff: true }, 'stuff'));
    t.false((0, generic_types_1.hasTruthyKey)({ stuff: false }, 'stuff'));
    t.false((0, generic_types_1.hasTruthyKey)({ stuff: undefined }, 'stuff'));
    t.false((0, generic_types_1.hasTruthyKey)({ stuff: null }, 'stuff'));
});
//# sourceMappingURL=generic-types.test.js.map